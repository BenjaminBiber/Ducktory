@page "/"
@using System.Diagnostics
@using System.Net
@using System.Text
@using Enten.Components.Classes
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using YamlDotNet.Serialization
@inject NavigationManager Navigation
@using YamlDotNet.Serialization.NamingConventions
@inject HttpClient Http
@inject IWebAssemblyHostEnvironment _env
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>
<div id="page">
    <div id="pic">
        <canvas style="width: 100%; height: 100%" id="myCanvas"></canvas>
    </div>

    <div class="Controls">
        <div class="partswitch">
            <p>Ebene</p>
            <p>Sichtbarkeit</p>
            <p>links</p>
            <p>Teil</p>
            <p>Rechts</p>
        </div>
        @foreach (var folder in FoldersWithPngFiles.OrderByDescending(x => x.SortOrder))
        {
            <PartSwithc SortOrder="@(o => { folder.SortOrder = o; SwitchPicture(); })" isVisible="@(b => { folder.IsVisible = b; SwitchPicture(); })" currentImage="@(s => { folder.currentPicture = s; SwitchPicture(); })" Duckpart="folder"></PartSwithc>
        }
        @if (true)
        {
            <div style="display: flex; flex-direction: column; justify-content: center; gap: 1em; margin-top: 2em;">
                <p style="color: red;">@error</p>
                <button @onclick="GetPicture">📥 Bild herunterladen</button>
                <button @onclick="CopyPicture" id="CopyButton">📥 Bild kopieren</button>
                <div class="upload" id="upload">
                    <div class="input_Div">
                        <label for="select">Ordner auswählen</label>
                        <select id="select" @bind="selectedElement">
                            @foreach (var item in folders)
                            {
                                <option value="@item">@item</option>
                            }
                        </select>
                        <InputFile OnChange="HandleFileSelected" />

                        @if (uploadedFile != null)
                        {
                            <p>Datei: @fileName</p>
                            <button @onclick="UploadToGitHub"> Bild Hochladen</button>
                        }
                    </div>

                    <div class="Upload_div">
                        <label for="name">Neuen Ordner erstellen</label>
                        <input id="name" placeholder="Ordnername" @bind="newFolderName" type="text"></input>
                        <button @onclick="CreateNewFolder">Ordner speichern</button>
                    </div>
                </div>
            </div>
        }
    </div>

</div>

<style>
    .upload{
        display: flex;
        justify-content: space-evenly;
        flex-direction: row;
        gap: 2.5em;
    }
    
    #upload {
        display: none;
    }
    
    .input_Div,.Upload_div{
        display: flex;
        gap: 1em;
        align-items: center;
        justify-content: center;
        flex-direction: column;
    }
    
    #page {
        display: flex;
        justify-content: space-evenly;
    }
    .DuckPartImage
    {
        width: 100%;
        position: absolute;
    }
    
    #pic {
        position: relative;
        width: 80vh;
        height: 80vh;
    }
    
    .Controls {
        width: 40em;
        padding: 2.5%;
        gap: 5%;
        border: 2px solid black;
        border-radius: 1em;
    }

    .partswitch {
        display: flex;
        width: 30em;
        justify-content: space-between;
        margin-bottom: 0.5em;
    }
    
    @@media (max-width: 678px)
    {
        #CopyButton {
            display: none;
        }
        
        #page {
            flex-direction: column;
        }
        
        .partswitch {
            width: 100% !important;
        }
        
        .DuckPartImage {
            width:  100vw;
        }
        
        #pic {
            height:  100vw;
            width: 100vw;
        }
        
        .Controls {
            width: 100vw;
        }
        
        .upload {
            flex-direction: column;
        }
    }
</style>

@code
{
    public List<Duckpart> FoldersWithPngFiles { get; set; } = [];
    private string UploadMessage { get; set; }
    private string selectedElement = "";
    private string newFolderName = "";
    private List<string> folders = [];
    private IBrowserFile? uploadedFile;
    private string? fileContentBase64;
    private string fileName = "";
    public string error = "";

    private async Task SwitchPicture()
    {
        var imageUrls = FoldersWithPngFiles.OrderBy(x => x.SortOrder).Where(x => x.IsVisible).Select(x => $"{Navigation.BaseUri}{x.currentPicture}").ToArray();
        await JS.InvokeVoidAsync("renderImagesOnCanvas", (object)imageUrls);

    }

    private async Task CopyPicture()
    {
        await JS.InvokeVoidAsync("CopyCanvasToClipboard");
    }
    
    private async Task GetPicture()
    {
        await JS.InvokeVoidAsync("DownloadImage");
    }
    
    protected override async Task OnInitializedAsync()
    {
        await GetFoldersInWwwRoot("Enten");
        await SwitchPicture();
    }

    private async Task CreateNewFolder()
    {
        if(folders.Any(x => x.Contains(newFolderName)))
        {
            UploadMessage = "Ordner existiert bereits!";
            return;
        }
        folders.Add(newFolderName);
        newFolderName = string.Empty;
    }
    
    public async Task GetFoldersInWwwRoot(string subDirectory = "")
    {
        string path = Path.Combine(_env.Environment, subDirectory);
        
        var structure = await LoadYamlAsync();
        if(structure == null)
        {
            return;
        }
        folders = structure.Enten.Keys.ToList();
        
        GetPngFilesInFolders(structure);
    }

    public void GetPngFilesInFolders(EnteModel duck)
    {
        FoldersWithPngFiles.Clear();
        int counter = 0;
        foreach (var folder in duck.Enten)
        {
                var item = new Duckpart(){Folder = folder.Key, Pictures = folder.Value, currentPicture = GetCurrentPicture(folder.Value), SortOrder = counter, IsVisible = getVisisbility(folder.Value)};
                FoldersWithPngFiles.Add(item);
                counter++;
        }
    }
    
    private bool getVisisbility(List<string> pictures)
    {
        return pictures.Any(x => x.Contains("00000"));
    }
    
    private string GetCurrentPicture(List<string> pictures)
    {
        return pictures.Any(x => x.Contains("00000")) ? pictures.FirstOrDefault(x => x.Contains("00000")) : pictures.FirstOrDefault();
    }
    
    public async Task<EnteModel?> LoadYamlAsync()
    {
        try
        {
            // Lade die YAML-Datei aus wwwroot
            var yamlText = await Http.GetStringAsync("images.yaml");

            var deserializer = new DeserializerBuilder()
                .WithNamingConvention(NullNamingConvention.Instance)
                .Build();

            return deserializer.Deserialize<EnteModel>(yamlText);
        }
        catch (Exception ex)
        {
            ShowError("Fehler beim Laden der YAML-Datei: " + ex.Message);
            return null;
        }
    }
    
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        fileName = uploadedFile.Name;

        using var memoryStream = new MemoryStream();
        await uploadedFile.OpenReadStream().CopyToAsync(memoryStream);
        fileContentBase64 = Convert.ToBase64String(memoryStream.ToArray());
    }

    private async Task UploadToGitHub()
    {
        if (string.IsNullOrEmpty(fileContentBase64)) return;

        var githubToken = "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"; // 🔥 In Produktionsumgebungen sicher speichern!
        var repoOwner = "benjaminbiber";
        var repoName = "ducktory";
        var branch = "main";
        var filePathInRepo = $"MeinBlazorProjekt/wwwroot/Enten/{selectedElement}/{fileName}";

        var url = $"https://api.github.com/repos/{repoOwner}/{repoName}/contents/{filePathInRepo}";

        var content = new
        {
            message = $"Add {fileName}",
            content = fileContentBase64,
            branch
        };

        var request = new HttpRequestMessage(HttpMethod.Put, url)
        {
            Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(content), System.Text.Encoding.UTF8, "application/json")
        };

        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", githubToken);
        request.Headers.UserAgent.ParseAdd("BlazorApp");

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Datei {fileName} erfolgreich hochgeladen!");
        }
        else
        {
            ShowError($"Fehler: {response.StatusCode}");
        }
    }

    private async Task ShowError(string _error)
    {
        error = _error;
        Thread.Sleep(5000);
        error = "";
    }
}
