@page "/"
@using System.Net
@using Enten.Components.Classes
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using YamlDotNet.Serialization
@using YamlDotNet.Serialization.NamingConventions
@inject HttpClient Http
@inject IWebAssemblyHostEnvironment _env
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>
<div id="page">
    <div id="pic">
        @foreach(var folder in FoldersWithPngFiles.Where(x => x.IsVisible).OrderBy(x => x.SortOrder))
        {
            <img class="DuckPartImage" alt="@folder.Folder" src="@folder.currentPicture" />
        }
    </div>

    <div class="Controls">
        <div class="partswitch">
            <p>Ebene</p>
            <p>Sichtbarkeit</p>
            <p>links</p>
            <p>Teil</p>
            <p>Rechts</p>
        </div>
        @foreach (var folder in FoldersWithPngFiles.OrderByDescending(x => x.SortOrder))
        {
            <PartSwithc SortOrder="@(o => folder.SortOrder = o)" isVisible="@(b => folder.IsVisible = b)" currentImage="@(s => folder.currentPicture = s)" Duckpart="folder"></PartSwithc>
        }
    </div>

</div>

<style>
    .upload{
        display: flex;
        justify-content: space-evenly;
        flex-direction: row;
        gap: 2.5em;
    }
    
    .input_Div,.Upload_div{
        display: flex;
        gap: 1em;
        align-items: center;
        justify-content: center;
        flex-direction: column;
    }
    
    #page {
        display: flex;
        justify-content: space-evenly;
    }
    .DuckPartImage
    {
        width: 100%;
        position: absolute;
    }
    
    #pic {
        position: relative;
        width: 80vh;
    }
    
    .Controls {
        width: 35em;
        padding: 2.5%;
        gap: 5%;
        border: 2px solid black;
        border-radius: 1em;
    }

    .partswitch {
        display: flex;
        width: 30em;
        justify-content: space-between;
        margin-bottom: 0.5em;
    }
</style>

@code
{
    public List<Duckpart> FoldersWithPngFiles { get; set; } = [];
    private string UploadMessage { get; set; }
    private string selectedElement = "";
    private string newFolderName = "";
    private List<string> folders = [];
    private List<string> imageUrls;
    
    protected override async Task OnInitializedAsync()
    {
        await GetFoldersInWwwRoot("Enten");
    }

    public async Task ChangeImage(string newImage, Duckpart folder)
    {
        folder.currentPicture = newImage;
        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateNewFolder()
    {
        string path = Path.Combine(_env.Environment + @"\Enten", newFolderName);
        if (Path.Exists(path))
        {
            UploadMessage = "Ordner existiert bereits!";
            return;
        }
        Directory.CreateDirectory(path);
        await GetFoldersInWwwRoot("Enten");
        newFolderName = string.Empty;
    }
    
    public async Task GetFoldersInWwwRoot(string subDirectory = "")
    {
        string path = Path.Combine(_env.Environment, subDirectory);
        
        var structure = await LoadYamlAsync();
        if(structure == null)
        {
            return;
        }
        folders = structure.Enten.Keys.ToList();
        
        GetPngFilesInFolders(structure);
    }

    public void GetPngFilesInFolders(EnteModel duck)
    {
        FoldersWithPngFiles.Clear();
        int counter = 0;
        foreach (var folder in duck.Enten)
        {
                var item = new Duckpart(){Folder = folder.Key, Pictures = folder.Value, currentPicture = GetCurrentPicture(folder.Value), SortOrder = counter, IsVisible = getVisisbility(folder.Value)};
                FoldersWithPngFiles.Add(item);
                counter++;
        }
    }
    
    private bool getVisisbility(List<string> pictures)
    {
        return pictures.Any(x => x.Contains("00000"));
    }
    
    private string GetCurrentPicture(List<string> pictures)
    {
        return pictures.Any(x => x.Contains("00000")) ? pictures.FirstOrDefault(x => x.Contains("00000")) : pictures.FirstOrDefault();
    }
    
    public async Task<EnteModel?> LoadYamlAsync()
    {
        try
        {
            // Lade die YAML-Datei aus wwwroot
            var yamlText = await Http.GetStringAsync("images.yaml");

            var deserializer = new DeserializerBuilder()
                .WithNamingConvention(NullNamingConvention.Instance)
                .Build();

            return deserializer.Deserialize<EnteModel>(yamlText);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fehler beim Laden der YAML-Datei: " + ex.Message);
            return null;
        }
    }
}
